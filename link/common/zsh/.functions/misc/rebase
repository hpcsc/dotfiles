REMOTE=origin

# determine default branch
if [ ! -f ".git/refs/remotes/${REMOTE}/HEAD" ]; then
    # ${REMOTE}/HEAD is created when the repo is cloned
    # if it doesn't exist for some reason, manually create and point it to either `main` or `master` so that we can deterministically check main branch
    if [ -f ".git/refs/remotes/${REMOTE}/main" ]; then
        git symbolic-ref "refs/remotes/${REMOTE}/HEAD" "refs/remotes/${REMOTE}/main"
        echo "=== pointed ${REMOTE}/HEAD to ${REMOTE}/main"
    elif [ -f ".git/refs/remotes/${REMOTE}/master" ]; then
        git symbolic-ref "refs/remotes/${REMOTE}/HEAD" "refs/remotes/${REMOTE}/master"
        echo "=== pointed ${REMOTE}/HEAD to ${REMOTE}/master"
    else
        echo "=== unable to determine default branch"
        return
    fi
fi

# get default branch
TARGET_BRANCH=$(git branch -rl "*/HEAD" | sed "s/^.*\///g")

# assume remote name is origin, remote branch has the same name with local branch
# this git fetch command:
# - brings over the commits from origin/${TARGET_BRANCH}
# - updates local ${TARGET_BRANCH} if it's a fast-forward. If it's not a fast-forward, it will fail (because we don't use +/force in refspec)
# - for git 1.8.4 and above, updates refs/remotes/origin/${TARGET_BRANCH} according to the config from remote.origin.fetch
# Reference: https://stackoverflow.com/a/50637676
git fetch ${REMOTE} ${TARGET_BRANCH}:${TARGET_BRANCH} || return
echo "=== Fetched latest for origin/${TARGET_BRANCH}"

git rebase ${TARGET_BRANCH} || return
echo "=== Rebased $(git rev-parse --abbrev-ref HEAD) to ${TARGET_BRANCH}"

